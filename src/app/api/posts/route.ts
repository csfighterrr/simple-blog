import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { verifyAdminAuth } from '@/lib/auth-utils'

// GET /api/posts - Fetch all posts
export async function GET(request: NextRequest) {
   try {
     const { searchParams } = new URL(request.url)
     const page = parseInt(searchParams.get('page') || '1')
     const limit = parseInt(searchParams.get('limit') || '10')
     const published = searchParams.get('published')
     const author = searchParams.get('author')
    
     const offset = (page - 1) * limit
    
     let query = supabase
       .from('posts')
       .select(`
         *,
         profiles:author_id(id, display_name)
       `)
       .order('created_at', { ascending: false })
       .range(offset, offset + limit - 1)
    
    //  Filter by published status if specified
     if (published !== null) {
       query = query.eq('published', published === 'true')
     }
    
    //  Filter by author if specified
     if (author) {
       query = query.eq('author_id', author)
     }
    
     const { data: posts, error, count } = await query
    
     if (error) {
       console.error('Error fetching posts:', error)
       return NextResponse.json(
         { error: 'Failed to fetch posts', details: error.message },
         { status: 500 }
       )
     }
    
     return NextResponse.json({
       posts: posts || [],
       pagination: {
         page,
         limit,
         total: count || 0,
         hasMore: (count || 0) > offset + limit
       }
     })
   } catch (error) {
     console.error('Unexpected error:', error)
     return NextResponse.json(
       { error: 'Internal server error' },
       { status: 500 }
     )
   }
 }

// POST /api/posts - Create a new post (ADMIN ONLY)
export async function POST(request: NextRequest) {
  try {
    // GUARD CLAUSE: Verify admin authentication
    const authResult = await verifyAdminAuth(request)
    
    if (!authResult.success) {
      return NextResponse.json(
        { error: authResult.error },
        { status: authResult.error?.includes('Admin access required') ? 403 : 401 }
      )
    }
    
    const adminUser = authResult.user
    const body = await request.json()
    const { title, content, published = false, image_url } = body
    
    // Validate required fields
    if (!title || !content) {
      return NextResponse.json(
        { error: 'Title and content are required' },
        { status: 400 }
      )
    }
    
    // Create the post with admin as author
    const { data: post, error } = await supabase
      .from('posts')
      .insert([
        {
          title: title.trim(),
          content,
          published,
          image_url: image_url || null,
          author_id: adminUser.id, // Use admin user ID as author
          // id and created_at are auto-generated by database
        }
      ])
      .select(`
        id,
        title,
        content,
        published,
        author_id,
        created_at,
        image_url,
        profiles:author_id(id, display_name, role)
      `)
      .single()
    
    if (error) {
      console.error('Error creating post:', error)
      return NextResponse.json(
        { 
          error: 'Failed to create post', 
          details: error.message 
        },
        { status: 500 }
      )
    }
    
    // Success response with 201 Created status
    return NextResponse.json(
      { 
        message: 'Post created successfully',
        post: {
          id: post.id,
          title: post.title,
          content: post.content,
          published: post.published,
          author_id: post.author_id,
          created_at: post.created_at,
          image_url: post.image_url,
          author: post.profiles ? {
            id: post.profiles.id,
            display_name: post.profiles.display_name,
            role: post.profiles.role
          } : null
        }
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('Unexpected error creating post:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}